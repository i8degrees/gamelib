/******************************************************************************

  nomlib - C++11 cross-platform game engine

Copyright (c) 2013, 2014 Jeffrey Carpenter <i8degrees@gmail.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/
#ifndef NOMLIB_GUI_DECORATOR_SPRITE_BATCH_HPP
#define NOMLIB_GUI_DECORATOR_SPRITE_BATCH_HPP

#include <memory>
#include <Rocket/Core/Decorator.h>

#include "nomlib/config.hpp"

namespace nom {

// Forward declarations
class SpriteBatch;
class Texture;

/// \brief Custom decorator type utilizing nom::SpriteBatch
///
/// \see http://librocket.com/wiki/documentation/C%2B%2BManual/Decorators
/// \see http://librocket.com/wiki/documentation/RCSS/Decorators
class DecoratorSpriteBatch: public Rocket::Core::Decorator
{
  public:
    /// \brief Default constructor.
    ///
    /// \remarks Initialize the de-serializer interface to
    /// nom::JsonCppDeserializer.
    DecoratorSpriteBatch();

    /// \brief Destructor.
    virtual ~DecoratorSpriteBatch();

    /// \param sheet_src RCSS property: sprite-sheet-src
    /// \param sheet_image_src RCSS property: sprite-sheet-image-src
    /// \param sheet_frame RCSS property: sprite-sheet-frame
    /// \param rml_source RML source
    ///
    /// \see nom::DecoratorInstancerSprite.
    bool initialize(  const std::string& sheet_src,
                      const std::string& sheet_image_src,
                      int sheet_frame,
                      const std::string& rml_source );

    /// Called on a decorator to generate any required per-element data for a newly decorated element.
    /// @param element[in] The newly decorated element.
    /// @return A handle to a decorator-defined data handle, or NULL if none is needed for the element.
    virtual Rocket::Core::DecoratorDataHandle GenerateElementData(Rocket::Core::Element* element);

    /// Called to release element data generated by this decorator.
    /// @param element_data[in] The element data handle to release.
    virtual void ReleaseElementData(Rocket::Core::DecoratorDataHandle element_data);

    /// Called to render the decorator on an element.
    /// @param element[in] The element to render the decorator on.
    /// @param element_data[in] The handle to the data generated by the decorator for the element.
    virtual void RenderElement(Rocket::Core::Element* element, Rocket::Core::DecoratorDataHandle element_data);

  private:
    /// \brief The sprite object used to render the decorator.
    std::unique_ptr<SpriteBatch> sprite_;
    std::unique_ptr<Texture> texture_;
};

} // namespace nom

#endif // include guard
