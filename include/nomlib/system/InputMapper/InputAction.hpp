/******************************************************************************

  nomlib - C++11 cross-platform game engine

Copyright (c) 2013, 2014 Jeffrey Carpenter <i8degrees@gmail.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/
#ifndef NOMLIB_SYSTEM_INPUT_MAPPER_INPUT_ACTION_HPP
#define NOMLIB_SYSTEM_INPUT_MAPPER_INPUT_ACTION_HPP

#include "nomlib/config.hpp"
#include "nomlib/system/Event.hpp"
#include "nomlib/system/GameController.hpp"

namespace nom {

/// \brief Base class for mapping an action to an input device
///
/// \remarks See also nom::InputMapper, nom::InputContext, nom::InputState
class InputAction
{
  public:
    /// \brief Default constructor; constructs an invalid action state.
    InputAction();

    virtual ~InputAction();

    /// \brief Get the underlying event associated with the input action.
    ///
    /// \remarks The event returned is "fake" -- it is used as the action's data
    /// fields for matching against the real user input.
    virtual const Event& event( void ) const;

    /// \brief Get the callback assigned to the input action.
    const nom::event_callback& callback( void ) const;

    void set_callback(const nom::event_callback& delegate);

    /// \brief C++ functor; execute the callback assigned for the input action.
    void operator()(const Event& evt) const;

    /// \brief The event type and relevant input data; the criteria is used to
    /// match against user input.
    Event event_;

  private:
    /// \brief The delegate to call upon a successful action to event match.
    nom::event_callback callback_;
};

/// \brief A structure containing information on a keyboard action.
struct KeyboardAction: public InputAction
{
  virtual ~KeyboardAction();

  /// \brief Constructor for initializing an object to a valid action state.
  ///
  /// \param state One of the nom::InputState enumeration values.
  ///
  /// \remarks The key modifier is initialized to KMOD_NONE.
  KeyboardAction(int32 sym, InputState state = InputState::PRESSED);

  /// \brief Constructor for initializing an object to a valid action state.
  ///
  /// \param mod An enumeration of key modifier masks; see also: the SDL2 wiki
  /// documentation page for [SDL_Keymod](https://wiki.libsdl.org/SDL_Keymod).
  ///
  /// \param state One of the nom::InputState enumeration values.
  KeyboardAction(int32 sym, uint16 mod, InputState state = InputState::PRESSED);

  /// \brief Constructor for initializing an object to a valid action state.
  ///
  /// \param mod An enumeration of key modifier masks; see also: the SDL2 wiki
  /// documentation page for [SDL_Keymod](https://wiki.libsdl.org/SDL_Keymod).
  ///
  /// \param state One of the nom::InputState enumeration values.
  KeyboardAction( int32 sym, uint16 mod, uint8 repeat,
                  InputState state = InputState::PRESSED );
};

/// \brief A structure containing information on a mouse button action.
///
/// \todo Implement nom::MouseButtonEvent's id field (to differentiate between
/// events generated by a touch input device and those generated by a real mouse
/// device).
struct MouseButtonAction: public InputAction
{
  virtual ~MouseButtonAction();

  /// \brief Constructor for initializing an object to a valid action state.
  ///
  /// \param button One of the nom::MouseButton enumeration values.
  /// \param state One of the nom::InputState enumeration values.
  ///
  /// \remarks The number of mouse button clicks for this action will be
  /// initialized to one (a single mouse button click).
  MouseButtonAction(uint8 button, InputState state = InputState::PRESSED);

  /// \brief Constructor for initializing an object to a valid action state.
  ///
  /// \param button One of the nom::MouseButton enumeration values.
  /// \param state One of the nom::InputState enumeration values.
  ///
  /// \param clicks The number of button clicks to react on; one (1) for
  /// a single-click, two (2) for a double-click, three (3) for a triple-click,
  /// and so on (hardware-dependent).
  MouseButtonAction(  uint8 button, uint8 clicks,
                      InputState state = InputState::PRESSED );
};

enum MouseWheelDirection: uint8
{
  MOUSE_WHEEL_INVALID = 0,
  MOUSE_WHEEL_LEFT = 1,
  MOUSE_WHEEL_RIGHT = 2,
  MOUSE_WHEEL_UP = 4,
  MOUSE_WHEEL_DOWN = 8,
};

/// \brief A structure containing information on a mouse wheel action.
struct MouseWheelAction: public InputAction
{
  virtual ~MouseWheelAction();

  /// \brief Construct a mouse wheel action.
  ///
  /// \param dir One of the MouseWheelDirection enumeration values.
  MouseWheelAction(MouseWheelDirection dir);
};

/// \brief A structure containing information on a joystick button action.
struct JoystickButtonAction: public InputAction
{
  virtual ~JoystickButtonAction();

  /// \brief Constructor for initializing an object to a valid action state.
  ///
  /// \param id The unique instance ID given to the joystick by the underlying
  /// platform.
  /// \param button One of the nom::Joystick::Button enumeration values.
  /// \param state One of the nom::InputState enumeration values.
  ///
  /// \see Joystick::device_id
  JoystickButtonAction(JoystickID id, uint8 button, InputState state);
};

/// \brief A structure containing information on a joystick axis action.
struct JoystickAxisAction: public InputAction
{
  virtual ~JoystickAxisAction();

  /// \brief Constructor for initializing an object to a valid action state.
  ///
  /// \param id The unique instance ID given to the joystick by the underlying
  /// platform.
  /// \param axis One of the nom::Joystick::Axis enumeration values.
  ///
  /// \see Joystick::device_id
  JoystickAxisAction(JoystickID id, uint8 axis);
};

/// \brief A structure containing information on a joystick POV hat action.
struct JoystickHatAction: public InputAction
{
  virtual ~JoystickHatAction();

  /// \brief Constructor for initializing an object to a valid action state.
  ///
  /// \param id The unique instance ID given to the joystick by the underlying
  /// platform.
  /// \param hat One of the nom::Joystick::Hat enumeration values.
  /// \param value One of the nom::Joystick::HatPosition enumeration values.
  ///
  /// \see Joystick::device_id
  JoystickHatAction(JoystickID id, uint8 hat, uint8 value);
};

/// \brief Create a game controller button action.
struct GameControllerButtonAction: public InputAction
{
  virtual ~GameControllerButtonAction();

  /// \brief Constructor for initializing an object to a valid action state.
  ///
  /// \param id The unique instance ID given to the joystick by the underlying
  /// platform.
  /// \param button One of the nom::GameController::Button enumeration values.
  /// \param state One of the nom::InputState enumeration values.
  ///
  /// \see GameController::device_id
  GameControllerButtonAction( JoystickID id, GameController::Button button,
                              InputState state = InputState::PRESSED );
};

/// \brief Create a game controller axis action.
struct GameControllerAxisAction: public InputAction
{
  virtual ~GameControllerAxisAction();

  /// \brief Constructor for initializing an object to a valid action state.
  ///
  /// \param id The unique instance ID given to the joystick by the underlying
  /// platform.
  /// \param axis One of the nom::GameController::Axis enumeration values.
  ///
  /// \see GameController::device_id
  GameControllerAxisAction(JoystickID id, GameController::Axis axis);
};

} // namespace nom

#endif // include guard defined
