/******************************************************************************

  nomlib - C++11 cross-platform game engine

Copyright (c) 2013, 2014 Jeffrey Carpenter <i8degrees@gmail.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/
#ifndef NOMLIB_SYSTEM_EVENT_HPP
#define NOMLIB_SYSTEM_EVENT_HPP

#include <functional>

#include "nomlib/config.hpp"
#include "nomlib/system/Joystick.hpp"

namespace nom {

const uint8 MAX_TEXT_INPUT_LENGTH = 32;
const uint8 MAX_TEXT_EDITING_LENGTH = 32;

/// \brief General hardware device state definitions.
enum InputState: uint8
{
  RELEASED = 0,
  PRESSED,
};

/// \brief Mouse button definitions.
enum MouseButton: uint8
{
  LEFT_MOUSE_BUTTON = 1,
  MIDDLE_MOUSE_BUTTON,
  RIGHT_MOUSE_BUTTON,
  X1_MOUSE_BUTTON,
  X2_MOUSE_BUTTON,
};

typedef int64 TouchID;
typedef int64 FingerID;

/// \brief Unique identifier for mouse events simulated with touch input
/// hardware.
const uint32 TOUCH_MOUSE_ID = nom::NOM_UINT32_MAX;

/// \brief Representation of a program termination request.
struct QuitEvent
{
  /// \brief User-defined data.
  void* data1;

  /// \brief User-defined data.
  void* data2;
};

/// \brief A structure containing information on a window event.
struct WindowEvent
{
  /// \brief Window event types.
  enum EventType: uint8
  {
    NONE = 0,
    SHOWN,
    HIDDEN,
    EXPOSED,
    MOVED,
    RESIZED,
    SIZE_CHANGED,
    MINIMIZED,
    MAXIMIZED,
    RESTORED,
    MOUSE_FOCUS_GAINED,
    MOUSE_FOCUS_LOST,
    KEYBOARD_FOCUS_GAINED,
    KEYBOARD_FOCUS_LOST,
    CLOSE,
  };

  /// \brief The window's event type.
  ///
  /// \see nom::WindowEvent::EventType
  uint8 event;

  /// \brief Event dependent data; typically the X coordinate position or width
  /// data of an event.
  int32 data1;

  /// \brief Event dependent data; typically the Y coordinate position or height
  /// data of an event.
  int32 data2;

  /// \brief The identifier of the window at the moment of the event.
  uint32 window_id;
};

/// \brief A structure containing information on a keyboard event.
struct KeyboardEvent
{
  /// \brief The virtual key code.
  int32 sym;

  /// \brief An enumeration of key modifier masks; see also: the SDL2 wiki
  /// documentation page for [SDL_Keymod](https://wiki.libsdl.org/SDL_Keymod).
  uint16 mod;

  /// \brief The physical key code.
  uint16 scan_code;

  /// \brief The state of the key press event.
  ///
  /// \see nom::InputState
  uint8 state;

  /// \brief Non-zero if this is a repeating key press event.
  uint8 repeat;

  /// \brief The identifier of the window at the moment of the event.
  uint32 window_id;
};

/// \brief A structure containing information on a mouse event.
struct MouseMotionEvent
{
  /// \brief The mouse instance identifier, or SDL_TOUCH_MOUSEID.
  ///
  /// \remarks 'id' may be SDL_TOUCH_MOUSEID, for events that were generated by
  /// a touch input device, and not a real mouse. (You may want to ignore such
  /// events, if your application already handles SDL_TouchFingerEvent).
  uint32 id;

  /// \brief The X coordinate, relative to the nom::Window instance.
  int32 x;

  /// \brief The Y coordinate, relative to the nom::Window instance.
  int32 y;

  /// \brief The relative motion in the X coordinate direction.
  int32 x_rel;

  /// \brief The relative motion in the Y coordinate direction.
  int32 y_rel;

  /// \brief The state of the button.
  ///
  /// \remarks The state is a 32-bit button bit-mask of the current button
  /// state; the following masks are: SDL_BUTTON_LMASK, SDL_BUTTON_MMASK,
  /// SDL_BUTTON_RMASK, SDL_BUTTON_X1MASK, SDL_BUTTON_X2MASK.
  uint8 state;

  /// \brief The identifier of the window at the moment of the event.
  uint32 window_id;
};

/// \brief A structure containing information on a mouse button event.
struct MouseButtonEvent
{
  /// \brief The mouse instance identifier, or SDL_TOUCH_MOUSEID.
  ///
  /// \remarks 'id' may be SDL_TOUCH_MOUSEID, for events that were generated by
  /// a touch input device, and not a real mouse. (You may want to ignore such
  /// events, if your application already handles SDL_TouchFingerEvent).
  ///
  /// \note ev->button.which
  uint32 id;

  /// \brief The X coordinate, relative to the nom::Window instance.
  int32 x;

  /// \brief The Y coordinate, relative to the nom::Window instance.
  int32 y;

  /// \brief The button's event type.
  ///
  /// \see nom::MouseButton.
  uint8 button;

  /// \brief The state of the button.
  ///
  /// \see nom::InputState
  uint8 state;

  /// \brief Value containing how many mouse buttons were clicked.
  ///
  /// \remarks One (1) for single-click, two (2) for double-click, and so on.
  uint8 clicks;

  /// \brief The identifier of the window at the moment of the event.
  ///
  /// \note ev->button.windowID
  uint32 window_id;
};

/// \brief A structure containing information on a mouse wheel event.
struct MouseWheelEvent
{
  /// \brief The mouse instance identifier, or SDL_TOUCH_MOUSEID.
  ///
  /// \remarks 'id' may be SDL_TOUCH_MOUSEID, for events that were generated by
  /// a touch input device, and not a real mouse. (You may want to ignore such
  /// events, if your application already handles SDL_TouchFingerEvent).
  uint32 id;

  /// \brief X axis value; relative to the direction of the wheel.
  int32 x;

  /// \brief Y axis value, relative to the direction of the wheel.
  int32 y;

  // /// \brief The direction of the wheel.
  // ///
  // /// \remarks The axis of the wheel event; zero (0) for X-axis and one (1)
  // /// for Y-axis.
  // ///
  // /// \note This is only implemented for internal usage within
  // /// nom::InputMapper.
  // ///
  // /// \see nom::MouseWheelAction
  // uint8 axis;

  /// \brief The identifier of the window at the moment of event.
  uint32 window_id;
};

/// \brief A structure containing information on a joystick axis motion event.
struct JoystickAxisEvent
{
  /// \brief The joystick instance identifier.
  JoystickID id;

  /// \brief Index of the axis on the device.
  ///
  /// \see nom::JoystickAxis
  uint8 axis;

  /// \brief The current position of the axis.
  ///
  /// \remarks The range of the axis value is in between -32,768 to 32,767.
  int16 value;
};

/// \brief A structure containing information on a joystick button event.
struct JoystickButtonEvent
{
  /// \brief The joystick instance identifier.
  JoystickID id;

  /// \brief The index of the button.
  uint8 button;

  /// \brief The state of the button.
  ///
  /// \see nom::InputState
  uint8 state;
};

/// \brief Internal representation of a joystick hat position.
struct JoystickHatEvent
{
  /// \brief The joystick instance identifier.
  JoystickID id;

  /// \brief The index of the joystick hat.
  ///
  /// \see nom::JoystickHat
  uint8 hat;

  /// \brief The hat position value.
  ///
  /// \see nom::JoystickHatPosition
  uint8 value;
};

/// \brief Internal representation of a joystick device connection event.
struct JoystickDeviceEvent
{
  /// \brief The joystick instance identifier.
  ///
  /// \see Event::JOYSTICK_ADDED, Event::JOYSTICK_REMOVED
  JoystickID id;
};

/// \brief A structure containing information on a game controller axis motion
/// event.
struct GameControllerAxisEvent
{
  /// \brief The joystick instance identifier.
  JoystickID id;

  /// \brief Index of the axis on the device.
  ///
  /// \see nom::GameControllerAxis
  int8 axis;

  /// \brief The axis value.
  ///
  /// \remarks The range of this value is between -32,768 to 32,767.
  int16 value;
};

/// \brief A structure containing information on a game controller button event.
struct GameControllerButtonEvent
{
  /// \brief The joystick instance identifier.
  JoystickID id;

  /// \brief The index of the button.
  ///
  /// \see nom::GameControllerButton
  int8 button;

  /// \brief The state of the button.
  ///
  /// \see nom::InputState
  uint8 state;
};

/// \brief Internal representation of a game controller device connection
/// event.
struct GameControllerDeviceEvent
{
  /// \brief The joystick instance identifier.
  ///
  /// \see Event::GAME_CONTROLLER_ADDED,
  /// Event::GAME_CONTROLLER_REMOVED,
  /// Event::GAME_CONTROLLER_REMAPPED
  JoystickID id;
};

/// \brief A structure containing information on a finger (touch) event.
struct FingerEvent
{
  /// \brief The finger index identifier.
  FingerID id;

  /// \brief The X coordinate of the event; normalized 0..1.
  float x;

  /// \brief The Y coordinate of the event; normalized 0..1.
  float y;

  /// \brief The quantity of the pressure applied; normalized 0..1.
  float pressure;
};

/// \brief A structure containing information on a finger touch event.
///
/// \remarks SDL_FINGERMOTION, SDL_FINGERDOWN, or SDL_FINGERUP.
struct FingerTouchEvent
{
  /// \brief The touch device index identifier.
  TouchID id;

  /// \brief The finger index identifier.
  FingerEvent finger;

  /// \brief The X coordinate of the event; normalized 0..1.
  float x;

  /// \brief The Y coordinate of the event; normalized 0..1.
  float y;

  /// \brief The distance moved in the X axis; normalized 0..1.
  float dx;

  /// \brief The distance moved in the Y axis; normalized 0..1.
  float dy;

  /// \brief The quantity of the pressure applied; normalized 0..1.
  float pressure;
};

/// \brief A structure containing information on a multi-finger gesture (touch)
/// event.
///
/// \remarks SDL_MULTIGESTURE.
struct GestureEvent
{
  /// \brief The touch device index identifier.
  TouchID id;

  /// \brief The X coordinate of the event.
  float x;

  /// \brief The Y coordinate of the event.
  float y;

  /// \brief ...???
  float dTheta;

  /// \brief ...???
  float dDist;

  /// \brief The number of fingers used in the gesture event.
  uint16 num_fingers;
};

/// \brief A structure containing information on a Drag 'N' Drop event.
struct DragDropEvent
{
  /// \brief The path of the file dropped onto the nom::Window.
  const char* file_path;
};

/// \brief A structure containing information on a text input event.
struct TextInputEvent
{
  /// \brief The text input.
  char text[MAX_TEXT_INPUT_LENGTH];

  /// \brief The identifier of the window at the moment of the event.
  uint32 window_id;
};

/// \brief A structure containing information on a text editing event.
///
/// \remarks SDL_TEXTEDITING.
struct TextEditingEvent
{
  /// \brief The text being edited.
  char text[MAX_TEXT_EDITING_LENGTH];

  /// \brief The location to begin editing from.
  int32 start;

  /// \brief The number of characters to edit from the start point.
  int32 length;

  /// \brief The identifier of the window at the moment of the event.
  uint32 window_id;
};

/// \brief A structure containing information on an user event.
struct UserEvent
{
  /// \brief User defined event code.
  int32 code;

  /// \brief User defined data pointer.
  void* data1;

  /// \brief User defined data pointer.
  void* data2;

  /// \brief The identifier of the window at the moment of the event.
  uint32 window_id;
};

/// \brief Event handling types.
struct Event
{
  enum EventType: uint32
  {
    FIRST_EVENT = 0,
    QUIT_EVENT,
    WINDOW_EVENT,
    SYSWMEVENT,
    KEY_PRESS,
    KEY_RELEASE,
    MOUSE_MOTION,
    MOUSE_BUTTON_CLICK,
    MOUSE_BUTTON_RELEASE,
    MOUSE_WHEEL,
    JOYSTICK_AXIS_MOTION,
    JOYSTICK_BALL_MOTION,
    JOYSTICK_HAT_MOTION,
    JOYSTICK_BUTTON_PRESS,
    JOYSTICK_BUTTON_RELEASE,

    /// \brief The device index of the joystick connection event.
    JOYSTICK_ADDED,

    /// \brief The instance ID of the joystick removal event.
    JOYSTICK_REMOVED,

    GAME_CONTROLLER_AXIS_MOTION,

    GAME_CONTROLLER_BUTTON_PRESS,
    GAME_CONTROLLER_BUTTON_RELEASE,

    /// \brief The device index of the game controller connection event.
    GAME_CONTROLLER_ADDED,

    /// \brief The instance ID of the game controller removal event.
    GAME_CONTROLLER_REMOVED,

    /// \brief The instance ID of the game controller remapping event.
    GAME_CONTROLLER_REMAPPED,

    FINGER_MOTION,

    FINGER_PRESS,

    FINGER_RELEASE,

    MULTI_FINGER_GESTURE,
    DROP_FILE,
    TEXT_INPUT,
    TEXT_EDITING,
    RENDER_TARGETS_RESET,

// NOTE: Not available until the release of SDL 2.0.4
#if 0
    RENDER_DEVICE_RESET,
#endif
    USER_EVENT,
  };

  /// \brief The event type.
  ///
  /// \see nom::Event::EventType
  uint32 type;

  /// \brief The recorded time at the moment of the event.
  uint32 timestamp;

  union
  {
    QuitEvent quit;
    WindowEvent window;
    KeyboardEvent key;
    MouseMotionEvent motion;
    MouseButtonEvent mouse;
    MouseWheelEvent wheel;
    JoystickButtonEvent jbutton;
    JoystickAxisEvent jaxis;
    JoystickHatEvent jhat;
    JoystickDeviceEvent jdevice;
    GameControllerAxisEvent caxis;
    GameControllerButtonEvent cbutton;
    GameControllerDeviceEvent cdevice;
    FingerTouchEvent touch;
    GestureEvent gesture;
    DragDropEvent drop;
    TextInputEvent text;
    TextEditingEvent edit;
    UserEvent user;
  };
};

typedef std::function<void(const Event&)> event_callback;
typedef std::function<void(const Event&, void* data)> event_filter;

} // namespace nom

#endif // include guard defined
