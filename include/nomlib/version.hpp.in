/******************************************************************************

  nomlib - C++11 cross-platform game engine

Copyright (c) 2013, 2014 Jeffrey Carpenter <i8degrees@gmail.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/
#ifndef NOMLIB_VERSION_HPP
#define NOMLIB_VERSION_HPP

// This file is auto-generated by CMake at build time;
// See also: CMakeLists.txt.

#include <string>
#include <sstream>

#include "nomlib/config.hpp"

namespace nom {

/// \brief Container for x.x.x version schemes
struct VersionInfo
{
  public:
    /// \brief Default constructor; initialize version fields to zero (0).
    VersionInfo();

    /// \brief Destructor.
    ~VersionInfo();

    /// \brief Construct an object with specified version fields.
    VersionInfo(int major, int minor, int patch );

    /// \brief Get the major version.
    ///
    /// \returns An integer containing the major version.
    int major() const;

    /// \brief Get the minor revision version.
    ///
    /// \returns An integer containing the minor revision version.
    int minor() const;

    /// \brief Get the patch level version.
    ///
    /// \returns An integer containing the patch level version.
    int patch() const;

    /// \brief Get the full version as a string.
    ///
    /// \returns A std::string containing the full version.
    std::string version_string() const;

    /// \brief Convert a version string to major, minor and patch integers.
    ///
    /// \param ver_string A version string in the format of x.x.x, where x is a
    /// number between nom::NOM_INT_MIN and nom::NOM_INT_MAX.
    ///
    /// \returns Boolean TRUE upon a successful conversion, or boolean FALSE upon a
    /// unsuccessful conversion, such as if the version string format is invalid.
    ///
    /// \remarks This implementation derives from [version.cpp](http://www.ncbi.nlm.nih.gov/viewvc/v1/trunk/c%2B%2B/src/corelib/version.cpp?revision=51801&content-type=text%2Fplain&view=co), part of the [NCBI C++ Toolkit](http://www.ncbi.nlm.nih.gov/toolkit/).
    static bool convert_version_string( const std::string& ver_string,
                                        VersionInfo& info);

  private:
    int major_;
    int minor_;
    int patch_;
};

/// \brief Output a formatted, full version string.
std::ostream& operator <<(std::ostream& os, const VersionInfo& v);

bool operator ==(const VersionInfo& lhs, const VersionInfo& rhs);
bool operator !=(const VersionInfo& lhs, const VersionInfo& rhs);

/// \brief Lesser than comparison operator.
///
/// \param lhs Left operand.
/// \param rhs Right operand.
bool operator <(const VersionInfo& lhs, const VersionInfo& rhs);

/// \brief Lesser than or equal to comparison operator.
///
/// \param lhs Left operand.
/// \param rhs Right operand.
bool operator <=(const VersionInfo& lhs, const VersionInfo& rhs);

/// \brief Greater than or equal to comparison operator.
///
/// \param lhs Left operand.
/// \param rhs Right operand.
bool operator >(const VersionInfo& lhs, const VersionInfo& rhs);

/// \brief Greater than or equal to comparison operator.
///
/// \param lhs Left operand.
/// \param rhs Right operand.
bool operator >=(const VersionInfo& lhs, const VersionInfo& rhs);

/// \brief nomlib's library version.
///
/// \remarks This data is taken from from the project's root CMake build script.
///
/// \see CMakeLists.txt
const VersionInfo NOM_VERSION(  @PROJECT_VERSION_MAJOR@,
                                @PROJECT_VERSION_MINOR@,
                                @PROJECT_VERSION_PATCH@ );

/// \brief Get the current revision number build of nomlib.
///
/// \returns A std::string containing the top git commit ID (SHA).
std::string revision();

} // namespace nom

#endif // defined include guard
