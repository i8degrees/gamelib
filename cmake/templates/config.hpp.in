/******************************************************************************

  nomlib - C++11 cross-platform game engine

Copyright (c) 2013, 2014 Jeffrey Carpenter <i8degrees@gmail.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/

// This file is auto-generated by CMake at build time; modifications to this
// file *MUST* be done to config.hpp.in, located in the project's cmake
// templates directory.
//
// Any modifications made to this file will be replaced upon a project
// rebuild -- anytime CMake re-generates our project files.

#ifndef NOMLIB_CONFIG_HEADERS
#define NOMLIB_CONFIG_HEADERS

// nomlib library version
#include "nomlib/version.hpp"

// nomlib's standard integer types
#include "nomlib/types.hpp"

// Debugging
#include <iostream>

#include "nomlib/system/clock.hpp"
#include "nomlib/system/log.hpp"

/// \brief See also: cmake/platform.cmake
#cmakedefine NOM_USE_SDL2_ASSERT

// Include SDL2's enhanced assert facility if enabled, otherwise fall-back to
// standard C assert facility.
#if defined( NOM_USE_SDL2_ASSERT )  // See cmake/platform.cmake
  #include "SDL_assert.h"
#else
  #include <cassert>
#endif

/// \brief nomlib Debugging Options
///
/// Available preprocessor flags:
///
///     DEBUG
/// Activates output of all info, warning and error messages.
///
///     DEBUG_ASSERT
/// Activate run-time assert checks scattered throughout the code-base.
///
///     DEBUG_TRACE
/// Special debug level for activating output of each class object construction
/// and destruction that occurs. Unless you are an active developer of nomlib,
/// or perhaps suspect that an error in your software could be caused by nomlib,
/// you are unlikely to be interested in this debug level -- this option
/// generates a hefty amount of output text!
///
/// These definitions are passed at build time for activation like so:
///
///     cd build && cmake -DDEBUG=on ..
///
/// You may mix and match these flags however you wish.

/// Pretty print C macros purely for convenience sake
///
/// \deprecated Use NOM_DUMP
#define NOM_DUMP_VAR(var) NOM_DUMP(var)

/// \brief Macros for quickly dumping a variable.
#define NOM_DUMP(var) \
  ( std::cout << "In function: " << __func__ << std::endl << #var << ": " << var << std::endl << std::endl )

/// \brief Debugging macros;
///
/// \remarks If debugging is turned on, we log all warnings, errors & info.
#ifdef NOM_DEBUG

  /// \brief Log INFO debug level message.
  ///
  /// \remarks The identifier will be set to 'NOM'.
  ///
  /// \note This is a macro provided for internal debugging diagnostics.
  // #define NOM_LOG_INFO(message) \
    // ( std::cout << "NOM" << "_LOG_INFO at " << nom::time() << message << std::endl << std::endl )

  /// \brief Log INFO debug level message using a custom identifier.
  ///
  /// \note This is a macro provided for debugging projects that use nomlib.
  #define NOM_LOG_INFO(identifier, message) \
    ( std::cout << #identifier << "_LOG_INFO at " << nom::time() << "In function: " << __func__ << std::endl << message << std::endl << std::endl )

  /// \brief Log ERR debug level message.
  ///
  /// \remarks The identifier will be set to 'NOM'.
  ///
  /// \note This is a macro provided for internal debugging diagnostics.
  // #define NOM_LOG_ERR(message) \
    // ( std::cout << "NOM" << "_LOG_ERR at " << nom::time() << "In file " << __FILE__ << ":" << __LINE__ << std::endl << "Reason: " << message << std::endl << std::endl )

  /// \brief Log ERR debug level message using a custom identifier.
  ///
  /// \note This is a macro provided for debugging projects that use nomlib.
  #define NOM_LOG_ERR(identifier, message) \
    ( std::cout << #identifier << "_LOG_ERR at " << nom::time() << "In file " << __FILE__ << ":" << __LINE__ << std::endl << "Reason: " << message << std::endl << std::endl )

#else // Do not add any overhead
  #define NOM_LOG_INFO(identifier, message)
  #define NOM_LOG_ERR(identifier, message)
#endif

#define NOM_STUBBED(identifier) \
  ( std::cout << #identifier << "_LOG_STUB at " << nom::time() << "In file " << __FILE__ << ":" << __LINE__ << std::endl << std::endl )

#ifdef NOM_DEBUG_ASSERT // -D NOM_DEBUG_ASSERT=true

  // Use SDL2's enhanced assert macro if available, otherwise fall-back to
  // standard C assert.
  #if defined( NOM_USE_SDL2_ASSERT )
    #define NOM_ASSERT(expression) SDL_assert(expression)
  #else
    #define NOM_ASSERT(expression) \
      ( assert (expression) )
  #endif // defined( NOM_USE_SDL2_ASSERT )

#else // Do not add any overhead
  #define NOM_ASSERT(expression)  // NO-OP
#endif // defined( NOM_DEBUG_ASSERT )

#ifdef NOM_DEBUG_TRACE

  // If trace debugging is turned on, we show class construction and destruction
  #define NOM_LOG_TRACE(identifier) \
    ( std::cout << #identifier << "_LOG_TRACE at " << nom::time() << __func__ << std::endl << std::endl )

#else // Do not add any overhead
  #define NOM_LOG_TRACE(identifier)
#endif

#ifndef __cplusplus
  #pragma message ( "nomlib requires a C++11 capable compiler." )
#endif

/// \brief See nomlib/platforms.hpp for compiler detection handling. Note that
/// detection is horribly crude at the moment, so do expect to need to tweak it
/// during ports, etc.
///
/// \note See also: http://clang.llvm.org/docs/UsersManual.html
#if defined( NOM_DEBUG ) && defined( NOM_COMPILER_CLANG )

  /// \brief Macro for selectively ignoring the compiler warning messages
  /// generated when unused variables are found. Useful during major code
  /// refactoring, etc.
  ///
  /// \remarks This macro should be put on a line before the desired ignored
  /// variable(s).
  ///
  /// \note See also: CMAKE_CXX_FLAGS_DEBUG environmental variable within
  /// project's root CMakeLists.txt.
  #define NOM_IGNORED_VARS(expr) \
    _Pragma("clang diagnostic push") \
    _Pragma("clang diagnostic ignored \"-Wunused\"" )

  /// \brief Macro for terminating the ignoring of variable(s).
  #define NOM_IGNORED_ENDL(expr) \
    _Pragma("clang diagnostic pop")

#endif // defined( NOM_DEBUG ) && defined( NOM_COMPILER_CLANG )

#endif // include guard defined
