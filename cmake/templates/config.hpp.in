/******************************************************************************

  nomlib - C++11 cross-platform game engine

Copyright (c) 2013, 2014 Jeffrey Carpenter <i8degrees@gmail.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/

// This file is auto-generated by CMake at build time; modifications to this
// file *MUST* be done to config.hpp.in, located in the project's cmake
// templates directory.
//
// Any modifications made to this file will be replaced upon a project
// rebuild -- anytime CMake re-generates our project files.

#ifndef NOMLIB_CORE_CONFIG_HPP
#define NOMLIB_CORE_CONFIG_HPP

// Debugging
#include <iostream>

/// \brief See also: cmake/platform.cmake
#cmakedefine NOM_USE_SDL2_ASSERT

// Include SDL2's enhanced assert facility if enabled, otherwise fall-back to
// standard C assert facility.
#if defined( NOM_USE_SDL2_ASSERT )  // See cmake/platform.cmake
  #include "SDL_assert.h"
#else
  #include <cassert>
#endif

// nomlib's library version
#include "nomlib/version.hpp"

// nomlib's platform detection
#include "nomlib/platforms.hpp"

// nomlib's standard integer types
#include "nomlib/types.hpp"

#include "nomlib/core/SDL2Logger.hpp"

// nomlib's general-purpose macros
#include "nomlib/macros.hpp"

/// \brief Log a message using SDL2's logging facilities.
///
/// \param cat The category the output is logged under; see also:
/// NOM_LOG_CATEGORY_* enumeration.
///
/// \param prio The logging priority the message is logged under.
///
/// \param ... Variable list of std::ostringstream compatible arguments.
///
/// \note This is a helper macro for use with logging macros that are defined
/// below.
///
/// \see nom::SDL2Logger
#define NOM_LOG_MESSAGE( cat, prio, ... ) \
  { nom::SDL2Logger( cat, prio ).write( __VA_ARGS__ ); }

/// \brief Log a verbose priority level message.
///
/// \param cat The category the output is logged under; see also:
/// NOM_LOG_CATEGORY_* enumeration.
///
/// \param ... Variable list of std::ostringstream compatible arguments.
#define NOM_LOG_VERBOSE( cat, ... ) \
  NOM_LOG_MESSAGE( cat, nom::LogPriority::NOM_LOG_PRIORITY_VERBOSE, __VA_ARGS__ );

/// \brief Log a debug priority level message.
///
/// \param cat The category the output is logged under; see also:
/// NOM_LOG_CATEGORY_* enumeration.
///
/// \param ... Variable list of std::ostringstream compatible arguments.
#define NOM_LOG_DEBUG( cat, ... ) \
  NOM_LOG_MESSAGE( cat, nom::LogPriority::NOM_LOG_PRIORITY_DEBUG, __VA_ARGS__ );

/// \brief Log a info priority level message.
///
/// \param cat The category the output is logged under; see also:
/// NOM_LOG_CATEGORY_* enumeration.
///
/// \param ... Variable list of std::ostringstream compatible arguments.
#define NOM_LOG_INFO( cat, ... ) \
  NOM_LOG_MESSAGE( cat, nom::LogPriority::NOM_LOG_PRIORITY_INFO, __VA_ARGS__ );

/// \brief Log a warning priority level message.
///
/// \param cat The category the output is logged under; see also:
/// NOM_LOG_CATEGORY_* enumeration.
///
/// \param ... Variable list of std::ostringstream compatible arguments.
#define NOM_LOG_WARN( cat, ... ) \
  NOM_LOG_MESSAGE( cat, nom::LogPriority::NOM_LOG_PRIORITY_WARN, __VA_ARGS__ );

/// \brief Log an error priority level message.
///
/// \param cat The category the output is logged under; see also:
/// NOM_LOG_CATEGORY_* enumeration.
///
/// \param ... Variable list of std::ostringstream compatible arguments.
#define NOM_LOG_ERR( cat, ... ) \
  NOM_LOG_MESSAGE( cat, nom::LogPriority::NOM_LOG_PRIORITY_ERROR, __VA_ARGS__ );

/// \brief Log a critical priority level message.
///
/// \param cat The category the output is logged under; see also:
/// NOM_LOG_CATEGORY_* enumeration.
///
/// \param ... Variable list of std::ostringstream compatible arguments.
#define NOM_LOG_CRIT( cat, ... ) \
  NOM_LOG_MESSAGE( cat, nom::LogPriority::NOM_LOG_PRIORITY_CRITICAL, __VA_ARGS__ );

/// \brief Macros for logging a variable.
///
/// \deprecated This will be removed at some point in the future; the
/// replacement for this macro is NOM_DUMP_VAR. Application-level code should
/// especially avoid using this, as it forces one to enable NOM logging
/// category logging -- cluttering logs with both engine & app-level output.
#define NOM_DUMP( var ) \
  NOM_LOG_MESSAGE( NOM, nom::LogPriority::NOM_LOG_PRIORITY_DEBUG, "[", __FILE__, ":", __LINE__, "]", #var, ":", var );

/// \brief Log one or more variables.
///
/// \param cat The category the output is logged under; see also:
/// NOM_LOG_CATEGORY_* enumeration.
///
/// \param ... Variable list of std::ostringstream compatible arguments.
///
/// \remarks The message is logged under the debug priority.
#define NOM_DUMP_VAR( cat, ... ) \
  NOM_LOG_MESSAGE( cat, nom::LogPriority::NOM_LOG_PRIORITY_DEBUG, "[", __FILE__, ":", __LINE__, "]", __VA_ARGS__ );

/// \brief Log class construction and destruction
///
/// \param cat The category the output is logged under; see also:
/// NOM_LOG_CATEGORY_* enumeration.
#define NOM_LOG_TRACE( cat ) \
  NOM_LOG_MESSAGE( cat, nom::LogPriority::NOM_LOG_PRIORITY_DEBUG, NOM_FUNC );

/// \brief Log class construction and destruction
///
/// \param cat The category the output is logged under; see also:
/// NOM_LOG_CATEGORY_* enumeration.
///
/// \param prio The logging priority level; see also: SDL_LogPriority
/// enumeration.
#define NOM_LOG_TRACE_PRIO( cat, prio ) \
  NOM_LOG_MESSAGE( cat, prio, NOM_FUNC );

#define NOM_STUBBED( cat ) \
  NOM_LOG_MESSAGE( cat, nom::LogPriority::NOM_LOG_PRIORITY_INFO, "Stubbed function", NOM_FUNC, "was called" );

#ifdef NOM_DEBUG_ASSERT // -D NOM_DEBUG_ASSERT=on

  // Use SDL2's enhanced assert macro if available, otherwise fall-back to
  // standard C assert.
  #if defined( NOM_USE_SDL2_ASSERT )
    #define NOM_ASSERT(expression) SDL_assert(expression)
  #else
    #define NOM_ASSERT(expression) \
      ( assert (expression) )
  #endif // defined( NOM_USE_SDL2_ASSERT )

#else // Do not add any overhead
  #define NOM_ASSERT(expression)  // NO-OP
#endif // defined( NOM_DEBUG_ASSERT )

#ifndef __cplusplus
  #pragma message ( "nomlib requires a C++11 capable compiler." )
#endif

/// \brief See nomlib/platforms.hpp for compiler detection handling. Note that
/// detection is horribly crude at the moment, so do expect to need to tweak it
/// during ports, etc.
///
/// \note See also: http://clang.llvm.org/docs/UsersManual.html
#if defined( NOM_DEBUG ) && defined( NOM_COMPILER_CLANG )

  /// \brief Macro for selectively ignoring the compiler warning messages
  /// generated when unused variables are found. Useful during major code
  /// refactoring, etc.
  ///
  /// \remarks This macro should be put on a line before the desired ignored
  /// variable(s).
  ///
  /// \note See also: CMAKE_CXX_FLAGS_DEBUG environmental variable within
  /// project's root CMakeLists.txt.
  #define NOM_IGNORED_VARS(expr) \
    _Pragma("clang diagnostic push") \
    _Pragma("clang diagnostic ignored \"-Wunused\"" )

  /// \brief Macro for terminating the ignoring of variable(s).
  #define NOM_IGNORED_ENDL(expr) \
    _Pragma("clang diagnostic pop")

#else // Ignoring of compiler generated warning messages is not supported

  #define NOM_IGNORED_VARS()
  #define NOM_IGNORED_ENDL()

#endif  // defined( NOM_DEBUG ) && defined( NOM_COMPILER_CLANG )

// Image loader
#cmakedefine NOM_USE_SDL2_IMAGE @NOM_USE_SDL2_IMAGE@

// Font loader
#cmakedefine NOM_USE_SDL2_TTF @NOM_USE_SDL2_TTF@

// Audio
#cmakedefine NOM_USE_OPENAL @NOM_USE_OPENAL@
#cmakedefine NOM_USE_LIBSNDFILE @NOM_USE_LIBSNDFILE@

// High-quality rescaling algorithms for low-resolution sprites
// (i.e.: pixel art)
#cmakedefine NOM_USE_SCALEX @NOM_USE_SCALEX@
#cmakedefine NOM_USE_HQX @NOM_USE_HQX@

#endif // include guard defined
