cmake_minimum_required ( VERSION 2.6 )

set ( PROJECT_VERSION_MAJOR 0 )
set ( PROJECT_VERSION_MINOR 1 )
set ( PROJECT_VERSION_PATCH 0 )

project ( nomlib ) # $PROJECT_NAME

# Platform detection
include ( "${CMAKE_CURRENT_SOURCE_DIR}/cmake/platform.cmake" )

set ( SRC_DIR "${PROJECT_SOURCE_DIR}/src" ) # nomlib/src
set ( NOMLIB_HEADERS_DIR "include" ) # include/nomlib
set ( EXAMPLES_SRC_DIR "${PROJECT_SOURCE_DIR}/examples" ) # nomlib/examples
set ( NOMLIB_RESOURCES_DIR "Resources" ) # folder containing library data (ex.: icon, translations, etc.)
# Files used with documentation generation
set ( PROJECT_DOXYGEN_DIR "${PROJECT_SOURCE_DIR}/${NOMLIB_RESOURCES_DIR}/doxygen" )

# CMake Environment
set ( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/modules" )
set ( CMAKE_TEMPLATE_PATH ${CMAKE_TEMPLATE_PATH} "${PROJECT_SOURCE_DIR}/cmake/templates" )

# Auto-generated at build-time header files
configure_file  ( "${PROJECT_SOURCE_DIR}/cmake/version.hpp.in"
                  "${PROJECT_SOURCE_DIR}/${NOMLIB_HEADERS_DIR}/${PROJECT_NAME}/version.hpp"
                )

# Uninstall target support (always available)
configure_file  ( "${PROJECT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
                  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
                  IMMEDIATE @ONLY
                )

add_custom_target ( uninstall COMMAND ${CMAKE_COMMAND} -P
                    ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
                  )

# We only support building nomlib as a dynamic library at the moment
set ( BUILD_SHARED_LIBS on )

# Project Options
option ( VERBOSE "Alias for CMAKE_VERBOSE_MAKEFILE -- nice for debugging make scripts" off )
option ( DEBUG "Build with all debugging features" off )
option ( DEBUG_ASSERT "Build with run-time assertions enabled" off )
option ( DEBUG_TRACE "Build with trace logging of object construction & destruction" off )

option ( EXAMPLES "Build nomlib usage examples" off )
option ( DOCS "Generate HTML based API documentation -- requires Doxygen" off )

if ( PLATFORM_OSX )

  option ( UNIVERSAL "Build as an OSX Universal Library" off )
  option ( FRAMEWORK "Build OSX Framework instead of dylib" off )

endif ( PLATFORM_OSX )

if ( VERBOSE )

  set ( CMAKE_VERBOSE_MAKEFILE true )

endif ( VERBOSE )

if ( DEBUG )

  set ( CMAKE_BUILD_TYPE "Debug" )
  set ( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DNOM_DEBUG" )
  message ( STATUS "Building ${PROJECT_NAME} with debugging." )

else () # Build with optimizations for maximum speed and minimal size

  set ( CMAKE_BUILD_TYPE "Release" )
  message ( STATUS "Building ${PROJECT_NAME} with high speed, low drag!" )

endif ( DEBUG )

if ( DEBUG_ASSERT )

  add_definitions ( "-DNOM_DEBUG_ASSERT" )
  message ( STATUS "Building ${PROJECT_NAME} with run-time assertions." )

endif ( DEBUG_ASSERT )

if ( DEBUG_TRACE )

  # We intentionally do not set CMAKE_BUILD_TYPE to "Debug" or "Release" here so
  # we can enable this feature in either target mode to maximize debugging
  # capabilities.
  add_definitions ( "-DNOM_DEBUG_TRACE" )
  message ( STATUS "Building ${PROJECT_NAME} with class object call tracing." )

endif ( DEBUG_TRACE )

# I was able to shave off close to 50% time compiling nomlib by leaving
# this option off by default.
#
# PPC is not officially supported because I have no means whatsoever of
# testing such a package.
if ( UNIVERSAL )

  set ( CMAKE_OSX_ARCHITECTURES i386; x86_64 )
  message ( STATUS "Building an OSX Universal Library" )

endif ( UNIVERSAL )

if ( FRAMEWORK )
  message ( STATUS "Building OSX Framework bundle." )
endif ( FRAMEWORK )

# Platform specific configuration
if ( PLATFORM_LINUX ) # Tested on Ubuntu v12.04-LTS

  # Clang is not supported on Linux due to libc++ not being distributed by
  # default yet
  set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x" )

elseif ( PLATFORM_OSX )

  # libc++ requires OSX v10.7+
  set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++" )

  if ( CMAKE_GENERATOR STREQUAL "Xcode" ) # Available only on OSX, I think

    set ( CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11" )
    set ( CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++" )

  endif ( CMAKE_GENERATOR STREQUAL "Xcode" )

else () # Not Linux nor OSX

  # Use whatever CMake gathers for us and hope for the best!

endif ( PLATFORM_LINUX )

if ( DOCS )

  # Control whether or not to see warnings regarding incomplete documentation
  # from doxygen.
  # Valid values are "YES" or "NO" with a default value of "NO".
  set ( BUILD_DOCS_DEV "NO" )

  # Control whether or not to see messages generated by doxygen
  # Valid values are "YES" or "NO" with a default value of "NO".
  set ( BUILD_DOCS_DEV "YES" )

  find_package ( Doxygen )

  if ( NOT DOXYGEN_FOUND )
    message ( FATAL_ERROR "Doxygen is needed to build the documentation.")
  endif ( NOT DOXYGEN_FOUND )

  set ( DOXYFILE_IN ${CMAKE_TEMPLATE_PATH}/Doxyfile.in )
  set ( DOXYFILE ${PROJECT_BINARY_DIR}/Doxyfile )
  set ( DOXY_HTML_INDEX_FILE ${PROJECT_BINARY_DIR}/docs/html/index.html )
  #set ( DOXY_EXTRA_FILES "" )

  # Template Doxyfile
  configure_file  ( ${DOXYFILE_IN} ${DOXYFILE} @ONLY )

  # Generate docs only when dependencies change
  add_custom_command  ( OUTPUT ${DOXY_HTML_INDEX_FILE}
                        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYFILE}
                        MAIN_DEPENDENCY ${DOXYFILE} ${DOXYFILE_IN}
                        #DEPENDS project_targets ${DOXY_EXTRA_FILES}
                        COMMENT "Generating HTML documentation"
                      )

  # Add 'make docs' target
  add_custom_target ( docs ALL DEPENDS ${DOXY_HTML_INDEX_FILE} )

endif ( DOCS )

set ( NOMLIB_SOURCE ${NOMLIB_SOURCE}
      # audio
      ${SRC_DIR}/audio/AL/AudioDevice.cpp
      ${SRC_DIR}/audio/AL/Listener.cpp
      ${SRC_DIR}/audio/AL/OpenAL.cpp
      ${SRC_DIR}/audio/AL/SoundBuffer.cpp
      ${SRC_DIR}/audio/AL/SoundFile.cpp
      ${SRC_DIR}/audio/AL/SoundSource.cpp
      ${SRC_DIR}/audio/AL/Music.cpp
      ${SRC_DIR}/audio/AL/Sound.cpp
      # graphics
      ${SRC_DIR}/graphics/Text.cpp
      ${SRC_DIR}/graphics/BitmapFont.cpp
      ${SRC_DIR}/graphics/TrueTypeFont.cpp
      ${SRC_DIR}/graphics/IDisplay.cpp
      ${SRC_DIR}/graphics/Canvas.cpp
      ${SRC_DIR}/graphics/Display.cpp
      ${SRC_DIR}/graphics/Gradient.cpp
      ${SRC_DIR}/graphics/Image.cpp
      ${SRC_DIR}/graphics/Line.cpp
      ${SRC_DIR}/graphics/Pixel.cpp
      ${SRC_DIR}/graphics/Rectangle.cpp
      ${SRC_DIR}/graphics/Sprite.cpp
      # system
      ${SRC_DIR}/system/File.cpp
      ${SRC_DIR}/system/Clock.cpp
      ${SRC_DIR}/system/FPS.cpp
      ${SRC_DIR}/system/GameStates.cpp
      ${SRC_DIR}/system/Logger.cpp
      ${SRC_DIR}/system/ObjectCache.cpp
      ${SRC_DIR}/system/SDL_App.cpp
      ${SRC_DIR}/system/Input.cpp
      ${SRC_DIR}/system/Timer.cpp
      ${SRC_DIR}/system/Sleep.cpp
      # math
      ${SRC_DIR}/math/Color.cpp
      ${SRC_DIR}/math/Coords.cpp
      ${SRC_DIR}/math/Transformable.cpp
      # gui
      ${SRC_DIR}/gui/Cursor.cpp
      ${SRC_DIR}/gui/MessageBox.cpp
      # sdl
      ${SRC_DIR}/sdl/utils.cpp
    )

# Platform-specific source files
if ( PLATFORM_OSX )

  set ( NOMLIB_SOURCE ${NOMLIB_SOURCE} ${SRC_DIR}/system/OSX/ResourcePath.cpp )
  set ( NOMLIB_SOURCE ${NOMLIB_SOURCE} ${SRC_DIR}/system/UnixFile.cpp )

elseif ( PLATFORM_LINUX )

  set ( NOMLIB_SOURCE ${NOMLIB_SOURCE} ${SRC_DIR}/system/UnixFile.cpp )

elseif ( PLATFORM_WINDOWS )

  set ( NOMLIB_SOURCE ${NOMLIB_SOURCE} ${SRC_DIR}/system/WinFile.cpp )

endif ( PLATFORM_OSX )

# Project Header Files
include_directories ( ${NOMLIB_HEADERS_DIR} )

# Required Dependencies
#
# We gather up all of the library & header search paths in two separate
# variables -- EXT_HEADERS & EXTLIBS -- so we can then make a minimal number
# of calls to include_directories & linking of libraries.
#
find_package ( SDL REQUIRED )
find_package ( SDL_image REQUIRED )
find_package ( SDL_ttf REQUIRED )
find_package ( OpenAL REQUIRED )
find_package ( LibSndFile REQUIRED )
find_package ( LibMagic REQUIRED )

if ( SDL_FOUND )
  set ( EXT_HEADERS ${EXT_HEADERS} ${SDL_INCLUDE_DIR} )
  set ( EXTLIBS ${EXTLIBS} ${SDL_LIBRARY} )
endif ( SDL_FOUND )

if ( SDL_IMAGE_FOUND )
  set ( EXT_HEADERS ${EXT_HEADERS} ${SDL_IMAGE_INCLUDE_DIR} )
  set ( EXTLIBS ${EXTLIBS} ${SDLIMAGE_LIBRARY} )
endif ( SDL_IMAGE_FOUND )

if ( SDL_TTF_FOUND )
  set ( EXT_HEADERS ${EXT_HEADERS} ${SDL_TTF_INCLUDE_DIR} )
  set ( EXTLIBS ${EXTLIBS} ${SDLTTF_LIBRARY} )
endif ( SDL_TTF_FOUND )

if ( OPENAL_FOUND )
  set ( EXT_HEADERS ${EXT_HEADERS} ${OPENAL_INCLUDE_DIR} )
  set ( EXTLIBS ${EXTLIBS} ${OPENAL_LIBRARY} )
endif ( OPENAL_FOUND )

if ( LIBSNDFILE_FOUND )
  set ( EXT_HEADERS ${EXT_HEADERS} ${LIBSNDFILE_INCLUDE_DIR} )
  set ( EXTLIBS ${EXTLIBS} ${LIBSNDFILE_LIBRARY} )
endif ( LIBSNDFILE_FOUND )

if ( LIBMAGIC_FOUND )
  set ( EXT_HEADERS ${EXT_HEADERS} ${LIBMAGIC_INCLUD_DIR} )
  set ( EXTLIBS ${EXTLIBS} ${LIBMAGIC_LIBRARY} )
endif ( LIBMAGIC_FOUND )

# Now that we have collected all the header file search paths we need, we
# include them all here for the compiler to be made aware of
include_directories ( ${EXT_HEADERS} )

add_library ( ${PROJECT_NAME} SHARED ${NOMLIB_SOURCE} )

target_link_libraries  ( ${PROJECT_NAME} ${EXTLIBS} )

set_target_properties ( ${PROJECT_NAME} # makefile target
                        PROPERTIES SOVERSION
                        "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}"
                      )

if ( PLATFORM_OSX )

  set ( INSTALL_NAME_PATH "@executable_path/../Libraries" )

  if ( FRAMEWORK )

    set ( INSTALL_NAME_PATH "@executable_path/../Frameworks" )

    # For distribution in user's frameworks / OSX App Bundle
    # TODO: @rpath
    # TODO: when a dylib, use @executable_path/../Libraries
    set_target_properties ( ${PROJECT_NAME} PROPERTIES
                            BUILD_WITH_INSTALL_RPATH 1
                            INSTALL_NAME_DIR
                            "${INSTALL_NAME_PATH}"
                          )

    set ( CMAKE_INSTALL_PREFIX "$ENV{HOME}/Library/Frameworks" )
    set ( FRAMEWORK_PATH "${CMAKE_INSTALL_PREFIX}" )

    # Frameworks distribution
    set_target_properties ( ${PROJECT_NAME} PROPERTIES
                            FRAMEWORK
                            TRUE
                            MACOSX_FRAMEWORK_INFO_PLIST
                            "${PROJECT_SOURCE_DIR}/cmake/FrameworkInfo.plist.in"
                            MACOSX_FRAMEWORK_NAME
                            "${PROJECT_NAME}"
                            MACOSX_FRAMEWORK_ICON_FILE
                            "nomlib.icns"
                            MACOSX_FRAMEWORK_BUNDLE_VERSION
                            "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}-${CMAKE_BUILD_TYPE}"
                            MACOSX_FRAMEWORK_SHORT_VERSION_STRING
                            "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}"
                            MACOSX_FRAMEWORK_IDENTIFIER
                            "org.dev.${PROJECT_NAME}"
                          )

    # Install framework library file
    install ( TARGETS ${PROJECT_NAME} LIBRARY FRAMEWORK DESTINATION "${FRAMEWORK_PATH}" )

    # Install framework header files
    #
    # FIXME; should be ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.framework/Versions/Current/Headers with a symlink at root of framework
    install ( DIRECTORY ${NOMLIB_HEADERS_DIR}/${PROJECT_NAME} DESTINATION "${PROJECT_NAME}.framework/Headers"
              PATTERN ".*" EXCLUDE # do not copy dotfiles
            )

    # Install (optional) Resource files -- official library icon, docs, libmagic database, etc.
    install ( DIRECTORY ${NOMLIB_RESOURCES_DIR} DESTINATION "${PROJECT_NAME}.framework"
              OPTIONAL
              PATTERN ".*" EXCLUDE # do not include dotfiles
            )

    # Install nomlib's software license & general information
    install ( FILES
              ${PROJECT_SOURCE_DIR}/README.md
              ${PROJECT_SOURCE_DIR}/LICENSE.md
              ${PROJECT_SOURCE_DIR}/TODO.md
              DESTINATION "${PROJECT_NAME}.framework/${NOMLIB_RESOURCES_DIR}/Documentation"
            )

    if ( DOCS )

      # Install documentation files
      install ( DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs/html
                DESTINATION "${PROJECT_NAME}.framework/${NOMLIB_RESOURCES_DIR}/Documentation"
                PATTERN ".*" EXCLUDE # do not include dotfiles
              )

    endif ( DOCS )

  else ( NOT FRAMEWORK )

    # For distribution in user's frameworks / OSX App Bundle
    # TODO: @rpath
    # TODO: when a dylib, use @executable_path/../Libraries
    set_target_properties ( ${PROJECT_NAME} PROPERTIES
                          BUILD_WITH_INSTALL_RPATH 1
                          INSTALL_NAME_DIR
                          "${INSTALL_NAME_PATH}"
                        )

  endif ( FRAMEWORK )

endif ( PLATFORM_OSX )

if ( NOT FRAMEWORK ) # POSIX install; installs in standard locations

  # Install library in POSIX standard location by default
  install ( TARGETS ${PROJECT_NAME} LIBRARY DESTINATION lib )

  # Install nomlib header files
  install ( DIRECTORY ${NOMLIB_HEADERS_DIR}/${PROJECT_NAME} DESTINATION include
          PATTERN ".*" EXCLUDE # do not include dotfiles
          )

  # Install software license & general project information
  install ( FILES
            ${PROJECT_SOURCE_DIR}/README.md
            ${PROJECT_SOURCE_DIR}/LICENSE.md
            ${PROJECT_SOURCE_DIR}/TODO.md
            DESTINATION share/doc/${PROJECT_NAME}
          )

  if ( DOCS )

    # Install generated HTML documentation
    install ( DIRECTORY ${PROJECT_BINARY_DIR}/docs/html
              DESTINATION share/doc/${PROJECT_NAME}
              PATTERN ".*" EXCLUDE # do not include dotfiles
            )

    # Install generated man page documentation
    install ( DIRECTORY ${PROJECT_BINARY_DIR}/docs/man/man3
              DESTINATION share/man
              PATTERN ".*" EXCLUDE # do not include dotfiles
            )

  endif ( DOCS )

if ( PLATFORM_LINUX )
  install(CODE "MESSAGE(\"Post-install: sudo ldconfig.\")") # FIXME (prettify)
endif ( PLATFORM_LINUX )

endif ( NOT FRAMEWORK )

# nomlib examples configuration
if ( EXAMPLES )

  set ( EXECUTABLE_OUTPUT_PATH "${EXAMPLES_SRC_DIR}" )

  set ( NOMLIB_EXAMPLES_AUDIO
        ${EXAMPLES_SRC_DIR}/audio/audio.cpp
      )

  set ( NOMLIB_EXAMPLES_APP
        ${EXAMPLES_SRC_DIR}/app/app.cpp
      )

  set ( NOMLIB_EXAMPLES_FONTS
      ${EXAMPLES_SRC_DIR}/fonts/font.cpp
      )

  link_libraries ( ${PROJECT_NAME} SDLmain )
  add_executable ( audio/audio ${NOMLIB_EXAMPLES_AUDIO} )
  add_executable ( app/app ${NOMLIB_EXAMPLES_APP} )
  add_executable ( fonts/font ${NOMLIB_EXAMPLES_FONTS} )

endif ( EXAMPLES )
